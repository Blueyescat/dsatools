{
  "version": 3,
  "sources": ["../../../src/BPCmd.ts", "../../../src/BuildBits.ts", "../../../src/constants.ts", "../../../src/BuildCmd.ts", "../../../src/types.ts", "../../../src/ConfigCmd.ts", "../../../src/Blueprint.ts", "../../../src/injBrowser.ts", "../../../src/Decoder.ts", "../../../src/Encoder.ts", "../../../src/util.ts", "../../../src/index.ts"],
  "sourcesContent": ["export abstract class BPCmd {\r\n\t/**\r\n\t * @returns A new instance with the same properties. (Deep clone)\r\n\t */\r\n\tabstract clone()\r\n\t/** @private */\r\n\tabstract toArray(): any[]\r\n}\r\n", "/**\r\n * Used to specify repeated placements along the X+ axis in a single build command.\r\n * `101` = place 2 objects with a space between. Cannot exceed 64 bits.\r\n */\r\nexport class BuildBits {\r\n\t/** @private */\r\n\tint: bigint\r\n\r\n\t/**\r\n\t * @param input Use to initialize the bits by entering a binary string like `\"11001\"`.\r\n\t *  Left to right. Trailing zeros are ignored.\r\n\t * @throws SyntaxError if input string cannot be converted to a BigInt.\r\n\t */\r\n\tconstructor(input?: string | number | bigint) {\r\n\t\tif (input == null) {\r\n\t\t\tthis.int = 0n\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif (typeof input == \"string\") {\r\n\t\t\tinput = \"0b\" + reverse(input)\r\n\t\t} else if (typeof input != \"number\" && typeof input != \"bigint\") {\r\n\t\t\tthrow new TypeError(\"input must be a number, bigint or string\")\r\n\t\t}\r\n\t\tthis.int = BigInt(input)\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a bit at an index (makes it `1`).\r\n\t * @throws RangeError if the index is out of [0,63].\r\n\t */\r\n\tset(index: number): this {\r\n\t\tif (index < 0 || index > 63) throw new RangeError(\"index must be between [0,63]\")\r\n\t\tthis.int |= mask(index)\r\n\t\treturn this\r\n\t}\r\n\r\n\t/**\r\n\t * Clears a bit at an index (makes it `0`).\r\n\t * @throws RangeError if the index is out of [0,63].\r\n\t */\r\n\tclear(index: number): this {\r\n\t\tif (index < 0 || index > 63) throw new RangeError(\"index must be between [0,63]\")\r\n\t\tthis.int &= ~mask(index)\r\n\t\treturn this\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles a bit at an index.\r\n\t * @param force If specified, it works as a shortcut for {@link set} (true) and {@link clear} (false).\r\n\t * @throws RangeError if the index is out of [0,63].\r\n\t */\r\n\ttoggle(index: number, force?: boolean): this {\r\n\t\tif (index < 0 || index > 63) throw new RangeError(\"index must be between [0,63]\")\r\n\t\tif (typeof force == \"undefined\")\r\n\t\t\tthis.int ^= mask(index)\r\n\t\telse if (force === true)\r\n\t\t\tthis.set(index)\r\n\t\telse if (force === false)\r\n\t\t\tthis.clear(index)\r\n\t\treturn this\r\n\t}\r\n\r\n\t/** Checks whether a bit at an index is set. */\r\n\tisSet(index: number): boolean {\r\n\t\tif (index < 0 || index > 63) return false\r\n\t\treturn !!(this.int & mask(index))\r\n\t}\r\n\r\n\t/** Checks whether no bit is set. */\r\n\tisZero(): boolean {\r\n\t\treturn this.int == 0n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether there is only one bit and it is set to `1`, which is likely\r\n\t * just so that a shape can be specified in the encoded data.\r\n\t */\r\n\tisOne(): boolean {\r\n\t\treturn this.int == 1n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes leading zero bits. (Note that trailing zeros don't work anyway)\r\n\t * @example\r\n\t * const bits = new BuildBits(\"10100\") // 101\r\n\t * bits.del(0) // 001\r\n\t * bits.trimLeadZeros() // 1\r\n\t */\r\n\ttrimLeadZeros(): this {\r\n\t\tif (this.int)\r\n\t\t\tthis.int /= -this.int & this.int\r\n\t\treturn this\r\n\t}\r\n\r\n\t/** @returns Amount of all the bits. */\r\n\tget size(): number {\r\n\t\treturn this.int.toString(2).length\r\n\t}\r\n\r\n\t*[Symbol.iterator](): Iterator<boolean> {\r\n\t\tfor (const b of reverse(this.int.toString(2))) {\r\n\t\t\tyield b == \"1\"\r\n\t\t}\r\n\t}\r\n\r\n\t/** @returns Booleans representing the set and unset bits. */\r\n\ttoArray(): boolean[] {\r\n\t\treturn Array.from(this)\r\n\t}\r\n\r\n\t/** @returns A string of 1's and 0's representing the set and unset bits. */\r\n\ttoString(): string {\r\n\t\treturn reverse(this.int.toString(2))\r\n\t}\r\n\r\n\t/** @hidden */\r\n\tget [Symbol.toStringTag]() {\r\n\t\treturn this.toString()\r\n\t}\r\n\r\n\t/** Checks whether this bits equals to another. */\r\n\tequals(target: BuildBits) {\r\n\t\treturn this.int === target?.int\r\n\t}\r\n\r\n\t/** @returns A new instance with the same bits. */\r\n\tclone(): BuildBits {\r\n\t\treturn Object.assign(Object.create(Object.getPrototypeOf(this)), this)\r\n\t}\r\n}\r\n\r\nfunction mask(i: number) {\r\n\treturn 1n << BigInt(i)\r\n}\r\n\r\nfunction reverse(str: string) {\r\n\tif (str.length < 1) return str\r\n\treturn str.split(\"\").reduce((r, c) => c + r)\r\n}\r\n", "export const PREFIX = \"DSA:\"\r\n\r\n/** @hidden */\r\nexport const enum TAG {\r\n\tU8 = 0x80,\r\n\tU16 = 0x81,\r\n\tU32 = 0x82,\r\n\tU64 = 0x83,\r\n\tI8 = 0x84,\r\n\tI16 = 0x85,\r\n\tI32 = 0x86,\r\n\tI64 = 0x87,\r\n\tF32 = 0x88,\r\n\tF64 = 0x89,\r\n\tSTR_L1 = 0x8A,\r\n\tSTR_L2 = 0x8B,\r\n\tSTR_L4 = 0x8C,\r\n\tTRUE = 0x8D,\r\n\tFALSE = 0x8E,\r\n\tNULL = 0x8F,\r\n\tARRAY_BEGIN = 0x90,\r\n\tARRAY_END = 0x91,\r\n\tBYTES_L1 = 0x94,\r\n\tBYTES_L2 = 0x95,\r\n\tBYTES_L4 = 0x96\r\n}\r\n\r\n/** @hidden */\r\nexport const enum BlueprintIndex {\r\n\tVER,\r\n\tWIDTH,\r\n\tHEIGHT,\r\n\tCMDS\r\n}\r\n\r\n/** @hidden */\r\nexport const enum CmdType {\r\n\tBUILD,\r\n\tCONFIG\r\n}\r\n\r\n/** @hidden */\r\nexport const enum CfgMsgKey {\r\n\tFILTER_CONFIG = \"filter_config\",\r\n\tFILTER_ITEMS = \"filter_items\",\r\n\tANGLE = \"angle\",\r\n\tANGLE_FIXED = \"angle_fixed\",\r\n\tPUSHER = \"config_pusher\",\r\n\tLOADER = \"config_loader\"\r\n}\r\n\r\n/** @hidden */\r\nexport const enum BuildCmdIndex {\r\n\tTYPE,\r\n\tX,\r\n\tY,\r\n\tITEM,\r\n\tBITS,\r\n\tSHAPE\r\n}\r\n\r\n/** @hidden */\r\nexport const enum ConfigCmdIndex {\r\n\tTYPE,\r\n\tDATA\r\n}\r\n\r\n/** @hidden */\r\nexport const enum PusherCfgIndex {\r\n\tDEFAULT_MODE,\r\n\tFILTERED_MODE,\r\n\tANGLE,\r\n\tTARGET_SPEED,\r\n\tFILTER_BY_INVENTORY,\r\n\tMAX_BEAM_LENGTH\r\n}\r\n\r\n/** @hidden */\r\nexport const enum LoaderCfgIndex {\r\n\tPICKUP_POINT,\r\n\tDROP_POINT,\r\n\tPRIORTY,\r\n\tSTACK_LIMIT,\r\n\tCYCLE_TIME,\r\n\tREQUIRE_OUTPUT_INVENTORY,\r\n\tWAIT_FOR_STACK_LIMIT\r\n}\r\n", "import { BPCmd } from \"./BPCmd.js\"\r\nimport { BuildBits } from \"./BuildBits.js\"\r\nimport { CmdType, BuildCmdIndex as Index } from \"./constants.js\"\r\nimport { BuildCmdOptions } from \"./types.js\"\r\n\r\nexport class BuildCmd extends BPCmd implements BuildCmdOptions {\r\n\r\n\t/** @inheritDoc */ x: BuildCmdOptions[\"x\"]\r\n\t/** @inheritDoc */ y: BuildCmdOptions[\"y\"]\r\n\t/** @inheritDoc */ item: BuildCmdOptions[\"item\"]\r\n\t/** @inheritDoc */ bits: BuildCmdOptions[\"bits\"]\r\n\t/** @inheritDoc */ shape: BuildCmdOptions[\"shape\"]\r\n\r\n\tconstructor(input?: BuildCmdOptions) {\r\n\t\tsuper()\r\n\t\tfor (const prop in this)\r\n\t\t\tObject.defineProperty(this, prop, { configurable: false })\r\n\t\tif (input != null) {\r\n\t\t\tif (Object.getPrototypeOf(input) != Object.prototype)\r\n\t\t\t\tthrow new TypeError(\"input must be an Object literal\")\r\n\t\t\tthis.set(input)\r\n\t\t}\r\n\t}\r\n\r\n\t/** Changes multiple properties of the command. */\r\n\tset(input: BuildCmdOptions): this {\r\n\t\treturn Object.assign(this, input)\r\n\t}\r\n\r\n\t/** @private */\r\n\tfillFromArray(arr: any[]) {\r\n\t\tthis.x = arr[Index.X]\r\n\t\tthis.y = arr[Index.Y]\r\n\t\tthis.item = arr[Index.ITEM]\r\n\t\tthis.bits = typeof arr[Index.BITS] != \"undefined\" ? new BuildBits(arr[Index.BITS]) : undefined\r\n\t\tthis.shape = arr[Index.SHAPE]\r\n\t\treturn this\r\n\t}\r\n\r\n\t/** @private */\r\n\ttoArray() {\r\n\t\tconst arr = []\r\n\t\tarr[Index.TYPE] = CmdType.BUILD\r\n\r\n\t\tif (this.x !== undefined)\r\n\t\t\tarr[Index.X] = this.x\r\n\r\n\t\tif (this.y !== undefined)\r\n\t\t\tarr[Index.Y] = this.y\r\n\r\n\t\tif (this.item !== undefined)\r\n\t\t\tarr[Index.ITEM] = this.item\r\n\r\n\t\tif (this.bits !== undefined)\r\n\t\t\tarr[Index.BITS] = this.bits.int\r\n\r\n\t\tif (this.shape !== undefined && this.shape != 0) { // ignore shape if 0 (game default)\r\n\t\t\tarr[Index.SHAPE] = this.shape\r\n\r\n\t\t\tif (typeof arr[Index.BITS] == \"undefined\") // can't have shape without bits\r\n\t\t\t\tarr[Index.BITS] = 1n\r\n\t\t}\r\n\t\treturn arr\r\n\t}\r\n\r\n\tclone(): BuildCmd {\r\n\t\tconst clone = Object.assign(Object.create(Object.getPrototypeOf(this)), this)\r\n\t\tif (this.bits)\r\n\t\t\tclone.bits = this.bits.clone()\r\n\t\treturn clone\r\n\t}\r\n}\r\n", "import { BPCmd } from \"./BPCmd.js\"\r\nimport { BuildBits } from \"./BuildBits.js\"\r\n\r\n/** The mode of a pusher config. */\r\nexport enum PusherMode {\r\n\tPUSH,\r\n\tPULL,\r\n\tDO_NOTHING\r\n}\r\n\r\n/** The pickup or drop point of a loader config. */\r\nexport enum LoaderPoint {\r\n\tTOP_LEFT,\r\n\tTOP,\r\n\tTOP_RIGHT,\r\n\tLEFT,\r\n\tRIGHT,\r\n\tBOTTOM_LEFT,\r\n\tBOTTOM,\r\n\tBOTTOM_RIGHT\r\n}\r\n\r\n/** The priority of a loader config. */\r\nexport enum LoaderPriority {\r\n\tLOW,\r\n\tNORMAL,\r\n\tHIGH\r\n}\r\n\r\n/** The mode of a filter config. */\r\nexport enum FilterMode {\r\n\tALLOW_ALL,\r\n\tBLOCK_FILTER_ONLY,\r\n\tALLOW_FILTER_ONLY,\r\n\tBLOCK_ALL\r\n}\r\n\r\nexport enum FixedAngle {\r\n\tRIGHT,\r\n\tUP,\r\n\tLEFT,\r\n\tDOWN\r\n}\r\n\r\nexport interface DecoderOptions {\r\n\t/**\r\n\t * A config command is an array in `[CmdType, null | configMessage]` format.\r\n\t * `null` means that the config command is empty, and the game won't change config of the target object.\r\n\t * `configMessage` contains the config values, and it will be referred to as \"config data\" in the docs.\r\n\t * \r\n\t * Setting this option to `true` tells the decoder to ignore the config data while decoding a config command, but take the raw data.\r\n\t * The `null` is still read. Whether the config data is not decoded can be checked using {@link ConfigCmd#isRaw | ConfigCmd#isRaw}.\r\n\t * \r\n\t * A {@link Blueprint} containing non-decoded {@link ConfigCmd}s can still be encoded.\r\n\t * The raw data can be decoded individually using the {@link decodeConfigCmd} function, when needed.\r\n\t * \r\n\t * Consider enabling this if you don't need to read all the config commands,\r\n\t * to avoid unnecessary use of resources and decode a little faster.\r\n\t */\r\n\tignoreConfigCmdData?: boolean\r\n}\r\n\r\n/**\r\n * All the properties can be set, and are required for a valid blueprint.\r\n */\r\nexport interface BlueprintOptions {\r\n\t/**\r\n\t * Blueprint format version. 0 by default. At the time of writing, the game only accepts `0` and `-1`\r\n\t * and considers them the same. Any further updates may require changes in the library.\r\n\t * @defaultValue `0`\r\n\t */\r\n\tversion?: number\r\n\t/**\r\n\t * Width of the blueprint area in square. [1, 100] integer.\r\n\t * @defaultValue `1`\r\n\t */\r\n\twidth?: number\r\n\t/**\r\n\t * Height of the blueprint area in square. [1, 100] integer.\r\n\t * @defaultValue `1`\r\n\t */\r\n\theight?: number\r\n\t/**\r\n\t * All commands of the blueprint.\r\n\t * @example\r\n\t * for (const cmd of bp.commands) {\r\n\t * \tif (cmd instanceof BuildCmd) {\r\n\t * \t\tconsole.log(cmd.item)\r\n\t * \t}\r\n\t * }\r\n\t * @defaultValue `[]`\r\n\t */\r\n\tcommands?: Array<BPCmd>\r\n}\r\n\r\n/**\r\n * All the properties can be set. Set to `undefined` to remove a property. {@link x}, {@link y}, {@link item} are required for a valid command.\r\n */\r\nexport interface BuildCmdOptions {\r\n\t/**\r\n\t * X-coord, horizontal offset from the **middle** of the left bottom square of the blueprint area. Can go down to `-0.5`.\r\n\t */\r\n\tx?: number\r\n\t/**\r\n\t * Y-coord, vertical offset from the **middle** of left bottom square of the blueprint area. Can go down to `-0.5`.\r\n\t */\r\n\ty?: number\r\n\t/** Integer ID of the item to build. */\r\n\titem?: number\r\n\t/** A {@link BuildBits} instance. */\r\n\tbits?: BuildBits\r\n\t/** Shape index of the tile to be placed. */\r\n\tshape?: number\r\n}\r\n\r\n/**\r\n * All the properties can be set. Set to `undefined` to remove a property, `null` to use {@link ConfigCmd.defaults} during encoding.\r\n * @example\r\n * new ConfigCmd() // empty config\r\n * new ConfigCmd({ loader: null }) // default loader config\r\n * new ConfigCmd({ loader: { dropPoint: LoaderPoint.BOTTOM } }) // loader config with drop point bottom, rest default\r\n * cmd.loader.priority = null // change priority of existing loader config to default\r\n */\r\nexport interface ConfigCmdOptions {\r\n\t/** What the filter for hatches and loaders should do. */\r\n\tfilterMode?: FilterMode,\r\n\t/** Array of 3 item IDs in integer. */\r\n\tfilterItems?: [number, number, number],\r\n\t/** Used for expando boxes. [0, 360] float. */\r\n\tangle?: number,\r\n\t/** Used for shield generators. */\r\n\tfixedAngle?: FixedAngle,\r\n\t/**  */\r\n\tpusher?: PusherConfig,\r\n\t/**  */\r\n\tloader?: LoaderConfig\r\n}\r\n\r\n/**\r\n * All the properties can be set. Set to `undefined` to remove a property, `null` to use {@link ConfigCmd.defaults} during encoding.\r\n */\r\nexport interface LoaderConfig {\r\n\t/**  */\r\n\tpickupPoint?: LoaderPoint,\r\n\t/**  */\r\n\tdropPoint?: LoaderPoint,\r\n\t/**  */\r\n\tpriority?: LoaderPriority,\r\n\t/**  */\r\n\tstackLimit?: number,\r\n\t/** [20, 1200] float, in ticks. (1200/20 = 60 seconds cycle time in game) */\r\n\tcycleTime?: number,\r\n\t/**  */\r\n\trequireOutputInventory?: boolean,\r\n\t/**  */\r\n\twaitForStackLimit?: boolean\r\n}\r\n\r\n/**\r\n * All the properties can be set. Set to `undefined` to remove a property, `null` to use {@link ConfigCmd.defaults} during encoding.\r\n */\r\nexport interface PusherConfig {\r\n\t/** Pusher mode when it not hitting an item included in {@link ConfigCmd.filterItems}. */\r\n\tdefaultMode?: PusherMode,\r\n\t/** Pusher mode when it is hitting an item included in {@link ConfigCmd.filterItems}. */\r\n\tfilteredMode?: PusherMode,\r\n\t/** [0, 360] float. */\r\n\tangle?: number,\r\n\t/** [0, 20] float. */\r\n\ttargetSpeed?: number,\r\n\t/** Whether the filter should *also* check for items in a container that the beam hits. */\r\n\tfilterByInventory?: boolean,\r\n\t/** [0, 1000] float. */\r\n\tmaxBeamLength?: number\r\n}\r\n", "import { BPCmd } from \"./BPCmd.js\"\r\nimport { CfgMsgKey, CmdType, ConfigCmdIndex as Index, LoaderCfgIndex, PusherCfgIndex } from \"./constants.js\"\r\nimport {\r\n\tConfigCmdOptions, FilterMode, FixedAngle, LoaderConfig,\r\n\tLoaderPoint, LoaderPriority, PusherConfig, PusherMode\r\n} from \"./types.js\"\r\n\r\nlet defaults: Required<ConfigCmdOptions> = {\r\n\tfilterMode: FilterMode.ALLOW_ALL,\r\n\tfilterItems: [0, 0, 0],\r\n\tangle: 0,\r\n\tfixedAngle: FixedAngle.RIGHT,\r\n\tpusher: {\r\n\t\tdefaultMode: PusherMode.DO_NOTHING,\r\n\t\tfilteredMode: PusherMode.PUSH,\r\n\t\tangle: 0,\r\n\t\ttargetSpeed: 20,\r\n\t\tfilterByInventory: false,\r\n\t\tmaxBeamLength: 1000\r\n\t},\r\n\tloader: {\r\n\t\tpickupPoint: LoaderPoint.LEFT,\r\n\t\tdropPoint: LoaderPoint.RIGHT,\r\n\t\tpriority: LoaderPriority.NORMAL,\r\n\t\tstackLimit: 16,\r\n\t\tcycleTime: 20,\r\n\t\trequireOutputInventory: false,\r\n\t\twaitForStackLimit: false\r\n\t}\r\n}\r\n\r\nconst msgKey_prop: { [K in typeof CfgMsgKey[keyof typeof CfgMsgKey]]: keyof ConfigCmdOptions } = {\r\n\tfilter_config: \"filterMode\",\r\n\tfilter_items: \"filterItems\",\r\n\tangle: \"angle\",\r\n\tangle_fixed: \"fixedAngle\",\r\n\tconfig_pusher: \"pusher\",\r\n\tconfig_loader: \"loader\"\r\n}\r\nfor (const key in msgKey_prop) { msgKey_prop[msgKey_prop[key]] = key }\r\n\r\nexport class ConfigCmd extends BPCmd implements ConfigCmdOptions {\r\n\t/**\r\n\t * An object for default config values, intented to match the game's defaults.\r\n\t * Used for properties that are `null` during encoding.\r\n\t * \r\n\t * You can modify this as you wish, so that you don't have to depend on the defaults of the library.\r\n\t * See the object definition in [ConfigCmd.ts](https://github.com/Blueyescat/dsabp-js/blob/main/src/ConfigCmd.ts).\r\n\t */\r\n\tstatic get defaults() {\r\n\t\treturn defaults\r\n\t}\r\n\tstatic set defaults(input) {\r\n\t\tif (input != null && Object.getPrototypeOf(input) != Object.prototype)\r\n\t\t\tthrow new TypeError(\"defaults can only be set to an Object literal\")\r\n\t\tdefaults = input\r\n\t}\r\n\r\n\t/** @private */ rawData: Uint8Array\r\n\r\n\t/** @inheritDoc */ filterMode: ConfigCmdOptions[\"filterMode\"]\r\n\t/** @inheritDoc */ filterItems: ConfigCmdOptions[\"filterItems\"]\r\n\t/** @inheritDoc */ angle: ConfigCmdOptions[\"angle\"]\r\n\t/** @inheritDoc */ fixedAngle: ConfigCmdOptions[\"fixedAngle\"]\r\n\t/** @inheritDoc */ pusher: ConfigCmdOptions[\"pusher\"] = {}\r\n\t/** @inheritDoc */ loader: ConfigCmdOptions[\"loader\"] = {}\r\n\r\n\t/**\r\n\t * @param input If omitted, the config will be empty.\r\n\t * The game won't modify the existing config of an already placed object if the config command is empty.\r\n\t */\r\n\tconstructor(input?: ConfigCmdOptions) {\r\n\t\tsuper()\r\n\t\tfor (const prop in this)\r\n\t\t\tObject.defineProperty(this, prop, { configurable: false })\r\n\t\tif (input != null) {\r\n\t\t\tif (Object.getPrototypeOf(input) != Object.prototype)\r\n\t\t\t\tthrow new TypeError(\"input must be an Object literal\")\r\n\t\t\tthis.set(input)\r\n\t\t}\r\n\t}\r\n\r\n\t/** Changes multiple properties of the command. */\r\n\tset(input: ConfigCmdOptions): this {\r\n\t\treturn Object.assign(this, input)\r\n\t}\r\n\r\n\t/** [cmdType, cfgMsg: null | any[] | Uint8Array] @private */\r\n\tfillFromArray(arr: any[]) {\r\n\t\tif (arr[Index.DATA] == null)\r\n\t\t\treturn this\r\n\r\n\t\tif (arr[Index.DATA] instanceof Uint8Array)\r\n\t\t\treturn this.rawData = arr[Index.DATA], this\r\n\r\n\t\tarr = arr[Index.DATA]\r\n\r\n\t\tfor (let i = 0; i < arr.length; i++) {\r\n\t\t\tif (i <= 1) continue // ignore first 2 zeros, unknown\r\n\t\t\tif (typeof arr[i] == \"string\" // assume a string = key\r\n\t\t\t\t&& arr[i + 1] === 0 // assume following 0 means value next\r\n\t\t\t) {\r\n\t\t\t\tconst msgKey = arr[i]\r\n\t\t\t\tlet val = arr[i + 2]\r\n\r\n\t\t\t\tif (Array.isArray(val))\r\n\t\t\t\t\tval = cfgArrToObj(msgKey, val) ?? val\r\n\r\n\t\t\t\tthis[msgKey_prop[msgKey] ?? msgKey] = val\r\n\t\t\t\ti += 2\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\t/** @private */\r\n\tfillDataFromArray(data: any[]) {\r\n\t\tconst arr = []\r\n\t\tarr[Index.TYPE] = CmdType.CONFIG\r\n\t\tarr[Index.DATA] = data\r\n\t\treturn this.fillFromArray(arr)\r\n\t}\r\n\r\n\t/** @private */\r\n\ttoArray() {\r\n\t\tconst arr = []\r\n\t\tarr[Index.TYPE] = CmdType.CONFIG\r\n\r\n\t\tif (this.isRaw) {\r\n\t\t\tarr[Index.DATA] = this.rawData\r\n\t\t\treturn arr\r\n\t\t}\r\n\r\n\t\t// follows the same format commented in fillFromArray\r\n\t\tarr[Index.DATA] = [0, 0]\r\n\t\tfor (const prop of Object.keys(this)) {\r\n\t\t\tlet val = structuredClone(this[prop])\r\n\t\t\tconst msgKey = msgKey_prop[prop] ?? prop\r\n\r\n\t\t\tif (val === undefined) continue // undefined values meant to be excluded\r\n\t\t\tif (val === null || Object.getPrototypeOf(val) == Object.prototype) {\r\n\t\t\t\tif (val !== null && !Object.keys(val).length)\r\n\t\t\t\t\tcontinue // ignore empty objects\r\n\t\t\t\tval = cfgObjToArr(msgKey, val)\r\n\t\t\t} else if (!Array.isArray(val)) {\r\n\t\t\t\tval = [val]\r\n\t\t\t}\r\n\t\t\tarr[Index.DATA].push(msgKey, 0, val)\r\n\t\t}\r\n\t\treturn arr\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether the data of this command is not decoded. Comes from decoding a blueprint with\r\n\t * {@link DecoderOptions.ignoreConfigCmdData} = `true`.\r\n\t * \r\n\t * @see {@link DecoderOptions.ignoreConfigCmdData} for more info.\r\n\t */\r\n\tget isRaw() {\r\n\t\treturn this.rawData instanceof Uint8Array\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether this command has the same configuration as the target command.\r\n\t */\r\n\tequals(target: ConfigCmd) {\r\n\t\treturn deepEquals(this, target)\r\n\t}\r\n\r\n\tclone(): ConfigCmd {\r\n\t\tconst clone = Object.assign(Object.create(Object.getPrototypeOf(this)), this)\r\n\t\tif (this.rawData)\r\n\t\t\tclone.rawData = new Uint8Array(this.rawData)\r\n\t\treturn clone\r\n\t}\r\n}\r\n\r\nfunction deepEquals(a, b): boolean {\r\n\tif (a === b) return true\r\n\tif (a?.constructor !== b?.constructor) return false\r\n\tconst keysA = Object.keys(a)\r\n\treturn a && b\r\n\t\t&& typeof a === \"object\" && typeof b === \"object\"\r\n\t\t? (keysA.length === Object.keys(b).length\r\n\t\t\t&& keysA.every(key => deepEquals(a[key], b[key])))\r\n\t\t: a === b\r\n}\r\n\r\nfunction cfgArrToObj(key: string, arr: any[]) {\r\n\tswitch (key) {\r\n\t\tcase CfgMsgKey.FILTER_CONFIG:\r\n\t\tcase CfgMsgKey.ANGLE:\r\n\t\tcase CfgMsgKey.ANGLE_FIXED:\r\n\t\t\treturn arr[0]\r\n\t\tcase CfgMsgKey.FILTER_ITEMS:\r\n\t\t\treturn arr\r\n\t\tcase CfgMsgKey.LOADER:\r\n\t\t\treturn {\r\n\t\t\t\tpickupPoint: arr[LoaderCfgIndex.PICKUP_POINT],\r\n\t\t\t\tdropPoint: arr[LoaderCfgIndex.DROP_POINT],\r\n\t\t\t\tpriority: arr[LoaderCfgIndex.PRIORTY],\r\n\t\t\t\tstackLimit: arr[LoaderCfgIndex.STACK_LIMIT],\r\n\t\t\t\tcycleTime: arr[LoaderCfgIndex.CYCLE_TIME],\r\n\t\t\t\trequireOutputInventory: arr[LoaderCfgIndex.REQUIRE_OUTPUT_INVENTORY],\r\n\t\t\t\twaitForStackLimit: arr[LoaderCfgIndex.WAIT_FOR_STACK_LIMIT],\r\n\t\t\t}\r\n\t\tcase CfgMsgKey.PUSHER:\r\n\t\t\treturn {\r\n\t\t\t\tdefaultMode: arr[PusherCfgIndex.DEFAULT_MODE],\r\n\t\t\t\tfilteredMode: arr[PusherCfgIndex.FILTERED_MODE],\r\n\t\t\t\tangle: arr[PusherCfgIndex.ANGLE],\r\n\t\t\t\ttargetSpeed: arr[PusherCfgIndex.TARGET_SPEED],\r\n\t\t\t\tfilterByInventory: arr[PusherCfgIndex.FILTER_BY_INVENTORY],\r\n\t\t\t\tmaxBeamLength: arr[PusherCfgIndex.MAX_BEAM_LENGTH],\r\n\t\t\t}\r\n\t}\r\n}\r\n\r\nfunction cfgObjToArr(key: string, obj: LoaderConfig | PusherConfig) {\r\n\tconst a = []\r\n\tif (obj !== null) { // delete props that are set to null, so they will be overwritten\r\n\t\tfor (const key in obj)\r\n\t\t\tif (obj[key] === null)\r\n\t\t\t\tdelete obj[key]\r\n\t}\r\n\tswitch (key) {\r\n\t\tcase CfgMsgKey.LOADER:\r\n\t\t\tobj = { ...defaults.loader, ...obj } as LoaderConfig\r\n\t\t\ta[LoaderCfgIndex.PICKUP_POINT] = obj.pickupPoint\r\n\t\t\ta[LoaderCfgIndex.DROP_POINT] = obj.dropPoint\r\n\t\t\ta[LoaderCfgIndex.PRIORTY] = obj.priority\r\n\t\t\ta[LoaderCfgIndex.STACK_LIMIT] = obj.stackLimit\r\n\t\t\ta[LoaderCfgIndex.CYCLE_TIME] = obj.cycleTime\r\n\t\t\ta[LoaderCfgIndex.REQUIRE_OUTPUT_INVENTORY] = obj.requireOutputInventory\r\n\t\t\ta[LoaderCfgIndex.WAIT_FOR_STACK_LIMIT] = obj.waitForStackLimit\r\n\t\t\tbreak\r\n\t\tcase CfgMsgKey.PUSHER: {\r\n\t\t\tobj = { ...defaults.pusher, ...obj } as PusherConfig\r\n\t\t\ta[PusherCfgIndex.DEFAULT_MODE] = obj.defaultMode\r\n\t\t\ta[PusherCfgIndex.FILTERED_MODE] = obj.filteredMode\r\n\t\t\ta[PusherCfgIndex.ANGLE] = obj.angle\r\n\t\t\ta[PusherCfgIndex.TARGET_SPEED] = obj.targetSpeed\r\n\t\t\ta[PusherCfgIndex.FILTER_BY_INVENTORY] = obj.filterByInventory\r\n\t\t\ta[PusherCfgIndex.MAX_BEAM_LENGTH] = obj.maxBeamLength\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\treturn a\r\n}\r\n", "import { BuildCmd } from \"./BuildCmd.js\"\r\nimport { ConfigCmd } from \"./ConfigCmd.js\"\r\nimport { BuildCmdIndex, CmdType, ConfigCmdIndex, BlueprintIndex as Index } from \"./constants.js\"\r\nimport { BlueprintOptions } from \"./types.js\"\r\n\r\n// Should use Required<> but docs won't be inherited..\r\nexport class Blueprint implements BlueprintOptions {\r\n\r\n\t/** @inheritDoc */ version: BlueprintOptions[\"version\"]\r\n\t/** @inheritDoc */ width: BlueprintOptions[\"width\"]\r\n\t/** @inheritDoc */ height: BlueprintOptions[\"height\"]\r\n\t/** @inheritDoc */ commands: BlueprintOptions[\"commands\"]\r\n\r\n\t/**\r\n\t * @param input Defaults to a 1x1 blueprint with no commands and version 0.\r\n\t */\r\n\tconstructor(input?: BlueprintOptions) {\r\n\t\tfor (const prop in this)\r\n\t\t\tObject.defineProperty(this, prop, { configurable: false })\r\n\t\tif (typeof input == \"undefined\") {\r\n\t\t\tthis.version = 0\r\n\t\t\tthis.width = 1\r\n\t\t\tthis.height = 1\r\n\t\t\tthis.commands = []\r\n\t\t} else if (input != null && Object.getPrototypeOf(input) == Object.prototype) {\r\n\t\t\tthis.version = input.version ?? 0\r\n\t\t\tthis.width = input.width ?? 1\r\n\t\t\tthis.height = input.height ?? 1\r\n\t\t\tif (input.commands != null) {\r\n\t\t\t\tif (!Array.isArray(input.commands))\r\n\t\t\t\t\tthrow new TypeError(\"input.commands must be an array\")\r\n\t\t\t\tthis.commands = input.commands\r\n\t\t\t} else {\r\n\t\t\t\tthis.commands = []\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new TypeError(\"input must be an Object literal\")\r\n\t\t}\r\n\t}\r\n\r\n\t/** Changes multiple properties of the blueprint. */\r\n\tset(input: BlueprintOptions): this {\r\n\t\treturn Object.assign(this, input)\r\n\t}\r\n\r\n\t/** @private */\r\n\tfillFromArray(arr: any[], shallow?: boolean) {\r\n\t\tthis.version = arr[Index.VER]\r\n\t\tthis.width = arr[Index.WIDTH]\r\n\t\tthis.height = arr[Index.HEIGHT]\r\n\t\tthis.commands = shallow ? arr[Index.CMDS]\r\n\t\t\t: arr[Index.CMDS].map(cmd => {\r\n\t\t\t\tif (cmd[BuildCmdIndex.TYPE] == CmdType.BUILD)\r\n\t\t\t\t\treturn new BuildCmd().fillFromArray(cmd)\r\n\t\t\t\tif (cmd[ConfigCmdIndex.TYPE] == CmdType.CONFIG)\r\n\t\t\t\t\treturn new ConfigCmd().fillFromArray(cmd)\r\n\t\t\t})\r\n\t\treturn this\r\n\t}\r\n\r\n\t/** @private */\r\n\ttoArray(shallow?: boolean) {\r\n\t\tconst arr = []\r\n\t\tarr[Index.VER] = this.version\r\n\t\tarr[Index.WIDTH] = this.width\r\n\t\tarr[Index.HEIGHT] = this.height\r\n\t\tarr[Index.CMDS] = shallow ? this.commands : this.commands.map(c => c.toArray())\r\n\t\treturn arr\r\n\t}\r\n\r\n\t/**\r\n\t * @returns A new instance with the same properties. (Deep clone)\r\n\t */\r\n\tclone(): Blueprint {\r\n\t\tconst clone = Object.assign(Object.create(Object.getPrototypeOf(this)), this)\r\n\t\tif (this.commands)\r\n\t\t\tclone.commands = this.commands.map(c => c.clone())\r\n\t\treturn clone\r\n\t}\r\n}\r\n", "export const b64toUi8 = (str: string) => Uint8Array.from(atob(str), c => c.charCodeAt(0))\r\n\r\nexport const ui8tob64 = (ui8: Uint8Array) => btoa(String.fromCharCode.apply(null, ui8))\r\n\r\nexport function createWorker() {\r\n\tconst insideWorker = async info => {\r\n\t\tlet lib: typeof import(\".\") // eslint-disable-line\r\n\t\tself.addEventListener(\"message\", async (e: MessageEvent) => {\r\n\t\t\tconst data = e.data\r\n\t\t\twhile (!lib) await new Promise(r => setTimeout(r, 0))\r\n\t\t\t//\r\n\t\t\tif (data.cmd == \"decode\") {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tdata.result = new lib.Decoder().decodeSync(data.args.input, data.args.options)\r\n\t\t\t\t\t\t.toArray()\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tdata.err = err\r\n\t\t\t\t}\r\n\t\t\t\tdelete data.args\r\n\t\t\t\tself.postMessage(data)\r\n\t\t\t} else if (data.cmd == \"decodeConfigCmd\") {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tdata.result = new lib.Decoder().decodeConfigCmdData(data.args.rawData)\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tdata.err = err\r\n\t\t\t\t}\r\n\t\t\t\tdelete data.args\r\n\t\t\t\tself.postMessage(data)\r\n\t\t\t} else if (data.cmd == \"encode\") {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst bp = new lib.Blueprint().fillFromArray(data.args.input)\r\n\t\t\t\t\tdata.result = new lib.Encoder().encodeSync(bp)\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tdata.err = err\r\n\t\t\t\t}\r\n\t\t\t\tdelete data.args\r\n\t\t\t\tself.postMessage(data)\r\n\t\t\t}\r\n\t\t\t//\r\n\t\t})\r\n\t\tif (info.bundleInfo.format == \"iife\") {\r\n\t\t\timportScripts(info.path)\r\n\t\t\tlib = globalThis[info.bundleInfo.globalName]\r\n\t\t} else lib = await import(info.path)\r\n\t}\r\n\r\n\tconst workerData = {\r\n\t\tpath: import.meta.url,\r\n\t\tbundleInfo: {format:\"esm\",globalName:\"dsabp\"}\r\n\t}\r\n\treturn new Worker(URL.createObjectURL(new Blob([\r\n\t\t`(${insideWorker.toString()})(${JSON.stringify(workerData)})`\r\n\t], { type: \"text/javascript;charset=utf-8\" })))\r\n}\r\n", "\r\nimport { inflateSync as fflate_inflateSync } from \"fflate\" // @build_browser-only\r\n\r\nimport { Blueprint } from \"./Blueprint.js\"\r\nimport { BuildCmd } from \"./BuildCmd.js\"\r\nimport { ConfigCmd } from \"./ConfigCmd.js\"\r\nimport { BuildCmdIndex, CmdType, ConfigCmdIndex, PREFIX, TAG } from \"./constants.js\"\r\nimport { b64toUi8 } from \"./injBrowser.js\" // @build_browser-only\r\nimport { DecoderOptions } from \"./types.js\"\r\n\r\nconst enum ArrType {\r\n\tNONE,\r\n\tUNKNOWN,\r\n\tTOP,\r\n\tCMDS,\r\n\tCMD,\r\n\tCFG\r\n}\r\n\r\nconst arrTypeMap = {\r\n\t[ArrType.NONE]: ArrType.TOP,\r\n\t[ArrType.TOP]: ArrType.CMDS,\r\n\t[ArrType.CMDS]: ArrType.CMD,\r\n\t[ArrType.CMD]: ArrType.CFG,\r\n}\r\n\r\n/**\r\n * Internally created by the {@link decode}, {@link decodeSync}, {@link decodeConfigCmd} and {@link decodeConfigCmdSync} functions.\r\n * \r\n * There doesn't seem to be any benefit to using the same instance,\r\n * but it is possible to do so only with the sync methods.\r\n */\r\nexport class Decoder {\r\n\t#textDecoder: TextDecoder\r\n\t#bytes: Uint8Array\r\n\t#view: DataView\r\n\t#pos: number\r\n\t#lastArrType: number\r\n\toptions: DecoderOptions\r\n\r\n\tconstructor() {\r\n\t\tthis.#textDecoder = new TextDecoder(\"utf-8\")\r\n\t}\r\n\r\n\t/** @hidden */\r\n\t#init(buff: Buffer | Uint8Array, lastArrType: ArrType) {\r\n\t\tthis.#bytes = new Uint8Array(buff)\r\n\t\tthis.#view = new DataView(buff.buffer)\r\n\t\tthis.#pos = 0\r\n\t\tthis.#lastArrType = lastArrType ?? ArrType.NONE\r\n\t}\r\n\r\n\t/** @inheritDoc decodeSync */\r\n\tdecodeSync(input: string, options: DecoderOptions = {}): Blueprint {\r\n\t\tif (typeof input != \"string\")\r\n\t\t\tthrow new TypeError(\"input must be a string\")\r\n\r\n\t\tif (input.substring(0, PREFIX.length).toUpperCase() == PREFIX)\r\n\t\t\tinput = input.substring(PREFIX.length)\r\n\r\n\t\tif (typeof options.ignoreConfigCmdData == \"undefined\")\r\n\t\t\toptions.ignoreConfigCmdData = false\r\n\t\tthis.options = options\r\n\r\n\t\tlet inflated: Buffer | Uint8Array\r\n\t\tif (typeof zlib_inflateRawSync != \"undefined\") {\r\n\t\t\tconst b64decoded = Buffer.from(input, \"base64\")\r\n\t\t\tinflated = zlib_inflateRawSync(b64decoded)\r\n\t\t} else {\r\n\t\t\tconst b64decoded = b64toUi8(input)\r\n\t\t\tinflated = fflate_inflateSync(b64decoded)\r\n\t\t}\r\n\t\tthis.#init(inflated, ArrType.NONE)\r\n\t\treturn new Blueprint().fillFromArray(this.#read(), true)\r\n\t}\r\n\r\n\t/** @inheritDoc decodeConfigCmdSync */\r\n\tdecodeConfigCmdSync(cmd: ConfigCmd) {\r\n\t\tif (!(cmd instanceof ConfigCmd))\r\n\t\t\tthrow new TypeError(`input must be a ${ConfigCmd.name}`)\r\n\t\tif (!cmd.isRaw) return cmd\r\n\t\tconst dataArr = this.decodeConfigCmdData(cmd.rawData)\r\n\t\tcmd.rawData = undefined\r\n\t\treturn cmd.fillDataFromArray(dataArr)\r\n\t}\r\n\r\n\t/** @private */\r\n\tdecodeConfigCmdData(rawCmd: Uint8Array) {\r\n\t\tthis.#init(rawCmd, ArrType.CMD)\r\n\t\treturn this.#read()\r\n\t}\r\n\r\n\t#read() {\r\n\t\twhile (this.#pos < this.#bytes.length) {\r\n\t\t\tconst b = this.#bytes[this.#pos++]\r\n\t\t\tif (b <= 63) return b // positive fixint\r\n\t\t\tif (b <= 127) return b - 128 // negative fixint\r\n\t\t\tswitch (b) {\r\n\t\t\t\tcase TAG.ARRAY_BEGIN: return this.#readArray()\r\n\t\t\t\tcase TAG.U8: return this.#readU8()\r\n\t\t\t\tcase TAG.U16: return this.#readU16()\r\n\t\t\t\tcase TAG.U32: return this.#readU32()\r\n\t\t\t\tcase TAG.U64: return this.#readU64()\r\n\t\t\t\tcase TAG.I8: return this.#readI8()\r\n\t\t\t\tcase TAG.I16: return this.#readI16()\r\n\t\t\t\tcase TAG.I32: return this.#readI32()\r\n\t\t\t\tcase TAG.I64: return this.#readI64()\r\n\t\t\t\tcase TAG.F32: return this.#readF32()\r\n\t\t\t\tcase TAG.F64: return this.#readF64()\r\n\t\t\t\tcase TAG.NULL: return null\r\n\t\t\t\tcase TAG.TRUE: return true\r\n\t\t\t\tcase TAG.FALSE: return false\r\n\t\t\t\tcase TAG.BYTES_L1: return this.#readBytes(this.#getU8(), 1)\r\n\t\t\t\tcase TAG.BYTES_L2: return this.#readBytes(this.#getU16(), 2)\r\n\t\t\t\tcase TAG.BYTES_L4: return this.#readBytes(this.#getU32(), 4)\r\n\t\t\t\tcase TAG.STR_L1: return this.#readStr(this.#getU8(), 1)\r\n\t\t\t\tcase TAG.STR_L2: return this.#readStr(this.#getU16(), 2)\r\n\t\t\t\tcase TAG.STR_L4: return this.#readStr(this.#getU32(), 4)\r\n\t\t\t}\r\n\t\t\tthrow new Error(`unsupported byte: ${b} (0x${b.toString(16)})`)\r\n\t\t}\r\n\t}\r\n\r\n\t#readArray() {\r\n\t\tconst arr = []\r\n\t\tconst prevArrType = this.#lastArrType\r\n\t\tthis.#lastArrType = arrTypeMap[prevArrType] ?? ArrType.UNKNOWN\r\n\t\tconst currArrType = this.#lastArrType\r\n\r\n\t\twhile (this.#pos < this.#bytes.length) {\r\n\t\t\t// when reading the array ends\r\n\t\t\tif (this.#bytes[this.#pos] == TAG.ARRAY_END) {\r\n\t\t\t\tthis.#pos++\r\n\t\t\t\tthis.#lastArrType = prevArrType\r\n\r\n\t\t\t\t// if the array read is a command array, return a Cmd instance instead of the array\r\n\t\t\t\tif (currArrType == ArrType.CMD) {\r\n\t\t\t\t\tif (arr[BuildCmdIndex.TYPE] === CmdType.BUILD)\r\n\t\t\t\t\t\treturn new BuildCmd().fillFromArray(arr)\r\n\t\t\t\t\tif (arr[ConfigCmdIndex.TYPE] === CmdType.CONFIG)\r\n\t\t\t\t\t\treturn new ConfigCmd().fillFromArray(arr)\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn arr\r\n\t\t\t}\r\n\t\t\tarr.push(this.#read())\r\n\t\t}\r\n\t}\r\n\r\n\t#readU8() {\r\n\t\tconst v = this.#view.getUint8(this.#pos)\r\n\t\tthis.#pos++\r\n\t\treturn v\r\n\t}\r\n\t#readU16() {\r\n\t\tconst v = this.#view.getUint16(this.#pos, true)\r\n\t\tthis.#pos += 2\r\n\t\treturn v\r\n\t}\r\n\t#readU32() {\r\n\t\tconst v = this.#view.getUint32(this.#pos, true)\r\n\t\tthis.#pos += 4\r\n\t\treturn v\r\n\t}\r\n\t#readU64() {\r\n\t\tconst v = this.#view.getBigUint64(this.#pos, true)\r\n\t\tthis.#pos += 8\r\n\t\treturn v\r\n\t}\r\n\r\n\t#readI8() {\r\n\t\tconst v = this.#view.getInt8(this.#pos)\r\n\t\tthis.#pos++\r\n\t\treturn v\r\n\t}\r\n\t#readI16() {\r\n\t\tconst v = this.#view.getInt16(this.#pos, true)\r\n\t\tthis.#pos += 2\r\n\t\treturn v\r\n\t}\r\n\t#readI32() {\r\n\t\tconst v = this.#view.getInt32(this.#pos, true)\r\n\t\tthis.#pos += 4\r\n\t\treturn v\r\n\t}\r\n\t#readI64() {\r\n\t\tconst v = this.#view.getBigInt64(this.#pos, true)\r\n\t\tthis.#pos += 8\r\n\t\treturn v\r\n\t}\r\n\r\n\t#readF32() {\r\n\t\tconst v = this.#view.getFloat32(this.#pos, true)\r\n\t\tthis.#pos += 4\r\n\t\treturn v\r\n\t}\r\n\t#readF64() {\r\n\t\tconst v = this.#view.getFloat64(this.#pos, true)\r\n\t\tthis.#pos += 8\r\n\t\treturn v\r\n\t}\r\n\r\n\t#getU8() {\r\n\t\treturn this.#view.getUint8(this.#pos)\r\n\t}\r\n\t#getU16() {\r\n\t\treturn this.#view.getUint16(this.#pos, true)\r\n\t}\r\n\t#getU32() {\r\n\t\treturn this.#view.getUint32(this.#pos, true)\r\n\t}\r\n\r\n\t#readStr(byteLength, headerOffset) {\r\n\t\tconst offset = this.#pos + headerOffset\r\n\t\tconst str = this.#textDecoder.decode(this.#bytes.slice(offset, offset + byteLength))\r\n\t\tthis.#pos += headerOffset + byteLength\r\n\t\treturn str\r\n\t}\r\n\r\n\t/** May return an array if reading a config data, otherwise Uint8Array */\r\n\t#readBytes(byteLength, headOffset) {\r\n\t\t// if reading a byte array in a cmd array, it is config data\r\n\t\tconst readConfig = this.options.ignoreConfigCmdData !== true && this.#lastArrType == ArrType.CMD\r\n\r\n\t\tconst offset = this.#pos + headOffset\r\n\t\tconst arr = this.#bytes.slice(offset, offset + byteLength)\r\n\t\tthis.#pos = offset\r\n\t\tif (readConfig)\r\n\t\t\treturn this.#read() // directly start decoding the bytes inside the byte array\r\n\t\tthis.#pos += byteLength\r\n\t\treturn arr\r\n\t}\r\n}\r\n", "import { deflateSync as fflate_deflateSync } from \"fflate\" // @build_browser-only\r\n\r\nimport { Blueprint } from \"./Blueprint.js\"\r\nimport { BuildCmd } from \"./BuildCmd.js\"\r\nimport { ConfigCmd } from \"./ConfigCmd.js\"\r\nimport { ConfigCmdIndex, TAG } from \"./constants.js\"\r\nimport { ui8tob64 } from \"./injBrowser.js\" // @build_browser-only\r\n\r\n/**\r\n * Internally created by the {@link encode} and\t{@link encodeSync} methods.\r\n * \r\n * There doesn't seem to be any benefit to using the same instance,\r\n * but it is possible to do so only with the sync method.\r\n */\r\nexport class Encoder {\r\n\t#textEncoder: TextEncoder\r\n\t#bytes: Uint8Array\r\n\t#view: DataView\r\n\t#pos: number\r\n\r\n\tconstructor() {\r\n\t\tthis.#textEncoder = new TextEncoder()\r\n\t}\r\n\r\n\t#init(size: number) {\r\n\t\tthis.#view = new DataView(new ArrayBuffer(size))\r\n\t\tthis.#bytes = new Uint8Array(this.#view.buffer)\r\n\t\tthis.#pos = 0\r\n\t}\r\n\r\n\t/** @inheritDoc encode */\r\n\tencodeSync(bp: Blueprint) {\r\n\t\tif (!(bp instanceof Blueprint))\r\n\t\t\tthrow new TypeError(`input must be an instance of ${Blueprint.name}`)\r\n\r\n\t\tconst initSize = bp.commands.length\r\n\t\t\t? Math.max(bp.commands.length * 20, 512) // rough estimate based on cmd amount\r\n\t\t\t: 4096\r\n\t\tthis.#init(initSize)\r\n\t\tthis.#write(bp.toArray(true))\r\n\r\n\t\tconst encoded = this.#bytes.slice(0, this.#pos)\r\n\r\n\t\tif (typeof zlib_deflateRawSync != \"undefined\") {\r\n\t\t\tconst deflated = zlib_deflateRawSync(encoded, { level: 9 })\r\n\t\t\treturn deflated.toString(\"base64\")\r\n\t\t} else {\r\n\t\t\tconst deflated = fflate_deflateSync(encoded, { level: 9 })\r\n\t\t\treturn ui8tob64(deflated)\r\n\t\t}\r\n\t}\r\n\r\n\t#encodeArray(arr) {\r\n\t\tthis.#init(128)\r\n\t\tthis.#write(arr)\r\n\t\treturn this.#bytes.slice(0, this.#pos)\r\n\t}\r\n\r\n\t#write(obj) {\r\n\t\tif (typeof obj == \"number\" || typeof obj == \"bigint\") {\r\n\t\t\tthis.#writeNumber(obj)\r\n\t\t} else if (typeof obj == \"boolean\") {\r\n\t\t\tthis.#writeU8(obj ? TAG.TRUE : TAG.FALSE)\r\n\t\t} else if (typeof obj == \"string\") {\r\n\t\t\tthis.#writeStr(obj)\r\n\t\t} else if (obj == null) {\r\n\t\t\tthis.#writeU8(TAG.NULL)\r\n\t\t} else if (Array.isArray(obj)) {\r\n\t\t\tthis.#writeArr(obj)\r\n\t\t} else if (obj instanceof Uint8Array) {\r\n\t\t\tthis.#writeBin(obj)\r\n\t\t} else if (obj instanceof BuildCmd) {\r\n\t\t\tthis.#writeArr(obj.toArray())\r\n\t\t} else if (obj instanceof ConfigCmd) {\r\n\t\t\tconst arr = obj.toArray()\r\n\t\t\tif (Array.isArray(arr[ConfigCmdIndex.DATA])) // it is not raw data, encode it\r\n\t\t\t\tarr[ConfigCmdIndex.DATA] = new Uint8Array(new Encoder().#encodeArray(arr[ConfigCmdIndex.DATA]))\r\n\t\t\tthis.#writeArr(arr)\r\n\t\t} else {\r\n\t\t\tthrow new Error(`unsupported object: ${obj.constructor?.name} ${obj}`)\r\n\t\t}\r\n\t}\r\n\r\n\t#writeNumber(v: number | bigint, isSigned?: boolean) {\r\n\t\tlet isBigInt = typeof v == \"bigint\"\r\n\t\tif (isBigInt && v <= 4294967295) {\r\n\t\t\tv = Number(v)\r\n\t\t\tisBigInt = false\r\n\t\t}\r\n\r\n\t\t// float\r\n\t\tif (!Number.isSafeInteger(v) && !isBigInt) {\r\n\t\t\tthis.#writeU8(TAG.F32) // game uses F32?\r\n\t\t\tthis.#writeF32(v)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// single-byte fixint\r\n\t\tif (v >= -64 && v <= -1)\r\n\t\t\treturn this.#writeI8(64 | ((v as number) & 127))\r\n\t\telse if (v >= 0 && v <= 63)\r\n\t\t\treturn this.#writeI8(v)\r\n\r\n\t\t// int\r\n\t\tif (v < 0 || isSigned) {\r\n\t\t\tif (-128 <= v && v <= 127) {\r\n\t\t\t\tthis.#writeU8(TAG.I8)\r\n\t\t\t\tthis.#writeU8(v)\r\n\t\t\t} else if (-32768 <= v && v <= 32767) {\r\n\t\t\t\tthis.#writeU8(TAG.I16)\r\n\t\t\t\tthis.#writeI16(v)\r\n\t\t\t} else if (-2147483648 <= v && v <= 2147483647) {\r\n\t\t\t\tthis.#writeU8(TAG.I32)\r\n\t\t\t\tthis.#writeI32(v)\r\n\t\t\t} else {\r\n\t\t\t\tthis.#writeU8(TAG.I64)\r\n\t\t\t\tthis.#writeI64(BigInt(v))\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (v <= 255) {\r\n\t\t\t\tthis.#writeU8(TAG.U8)\r\n\t\t\t\tthis.#writeU8(v)\r\n\t\t\t} else if (v <= 65535) {\r\n\t\t\t\tthis.#writeU8(TAG.U16)\r\n\t\t\t\tthis.#writeU16(v)\r\n\t\t\t} else if (v <= 4294967295) {\r\n\t\t\t\tthis.#writeU8(TAG.U32)\r\n\t\t\t\tthis.#writeU32(v)\r\n\t\t\t} else {\r\n\t\t\t\tthis.#writeU8(TAG.U64)\r\n\t\t\t\tthis.#writeU64(BigInt(v))\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t#writeStr(v) {\r\n\t\tconst utf8arr = this.#textEncoder.encode(v)\r\n\t\tconst len = utf8arr.byteLength\r\n\t\tif (len <= 255) {\r\n\t\t\tthis.#writeU8(TAG.STR_L1)\r\n\t\t\tthis.#writeU8(len)\r\n\t\t} else if (len <= 65535) {\r\n\t\t\tthis.#writeU8(TAG.STR_L2)\r\n\t\t\tthis.#writeU16(len)\r\n\t\t} else if (len <= 4294967295) {\r\n\t\t\tthis.#writeU8(TAG.STR_L4)\r\n\t\t\tthis.#writeU32(len)\r\n\t\t}\r\n\t\tthis.#ensureSize(len)\r\n\t\tthis.#bytes.set(utf8arr, this.#pos)\r\n\t\tthis.#pos += len\r\n\t}\r\n\r\n\t#writeArr(arr) {\r\n\t\tthis.#writeU8(TAG.ARRAY_BEGIN)\r\n\t\tfor (const v of arr)\r\n\t\t\tthis.#write(v)\r\n\t\tthis.#writeU8(TAG.ARRAY_END)\r\n\t}\r\n\r\n\t#writeBin(obj) {\r\n\t\tconst size = obj.byteLength\r\n\t\tif (size <= 255) {\r\n\t\t\tthis.#writeU8(TAG.BYTES_L1)\r\n\t\t\tthis.#writeU8(size)\r\n\t\t} else if (size <= 65535) {\r\n\t\t\tthis.#writeU8(TAG.BYTES_L2)\r\n\t\t\tthis.#writeU16(size)\r\n\t\t} else if (size <= 4294967295) {\r\n\t\t\tthis.#writeU8(TAG.BYTES_L4)\r\n\t\t\tthis.#writeU32(size)\r\n\t\t}\r\n\t\tthis.#writeU8arr(obj)\r\n\t}\r\n\r\n\t#writeU8(v) {\r\n\t\tthis.#ensureSize(1)\r\n\t\tthis.#view.setUint8(this.#pos, v)\r\n\t\tthis.#pos++\r\n\t}\r\n\t#writeU16(v) {\r\n\t\tthis.#ensureSize(2)\r\n\t\tthis.#view.setUint16(this.#pos, v, true)\r\n\t\tthis.#pos += 2\r\n\t}\r\n\t#writeU32(v) {\r\n\t\tthis.#ensureSize(4)\r\n\t\tthis.#view.setUint32(this.#pos, v, true)\r\n\t\tthis.#pos += 4\r\n\t}\r\n\t#writeU64(v) {\r\n\t\tthis.#ensureSize(8)\r\n\t\tthis.#view.setBigUint64(this.#pos, v, true)\r\n\t\tthis.#pos += 8\r\n\t}\r\n\r\n\t#writeI8(v) {\r\n\t\tthis.#ensureSize(1)\r\n\t\tthis.#view.setInt8(this.#pos, v)\r\n\t\tthis.#pos++\r\n\t}\r\n\t#writeI16(v) {\r\n\t\tthis.#ensureSize(2)\r\n\t\tthis.#view.setInt16(this.#pos, v, true)\r\n\t\tthis.#pos += 2\r\n\t}\r\n\t#writeI32(v) {\r\n\t\tthis.#ensureSize(4)\r\n\t\tthis.#view.setInt32(this.#pos, v, true)\r\n\t\tthis.#pos += 4\r\n\t}\r\n\t#writeI64(v) {\r\n\t\tthis.#ensureSize(8)\r\n\t\tthis.#view.setBigInt64(this.#pos, v, true)\r\n\t\tthis.#pos += 8\r\n\t}\r\n\r\n\t#writeF32(v) {\r\n\t\tthis.#ensureSize(4)\r\n\t\tthis.#view.setFloat32(this.#pos, v, true)\r\n\t\tthis.#pos += 4\r\n\t}\r\n\t/* #writeF64(v) {\r\n\t\tthis.#ensureSize(8)\r\n\t\tthis.#view.setFloat64(this.#pos, v, true)\r\n\t\tthis.#pos += 8\r\n\t} */\r\n\r\n\t#writeU8arr(values) {\r\n\t\tthis.#ensureSize(values.length)\r\n\t\tthis.#bytes.set(values, this.#pos)\r\n\t\tthis.#pos += values.length\r\n\t}\r\n\r\n\t#ensureSize(size) {\r\n\t\tconst req = this.#pos + size\r\n\t\tif (req <= this.#view.byteLength) return\r\n\r\n\t\tconst buff = new ArrayBuffer(Math.max(req, this.#view.byteLength + 128))\r\n\t\tconst bytes = new Uint8Array(buff)\r\n\t\tconst view = new DataView(buff)\r\n\t\tbytes.set(this.#bytes)\r\n\t\tthis.#view = view\r\n\t\tthis.#bytes = bytes\r\n\t}\r\n}\r\n", "\r\nimport { Blueprint } from \"./Blueprint.js\"\r\nimport { createWorker as browser_createWorker } from \"./injBrowser.js\" // @build_browser-only\r\n\r\n\r\nconst isNode = globalThis.process?.release?.name == \"node\"\r\nconst isWorkerThread = isNode ? !isMainThread : (typeof WorkerGlobalScope != \"undefined\" && self instanceof WorkerGlobalScope)\r\n\r\nlet wkMsgId = 0\r\nconst wkRequests = {}\r\n\r\nexport const worker = isWorkerThread ? null : (isNode ? node_createWorker : browser_createWorker)() as any\r\n\r\nfunction handleWkMessage(data: { id: number; result: any; err: any }) {\r\n\tif (data.err)\r\n\t\twkRequests[data.id].rej(data.err)\r\n\telse\r\n\t\twkRequests[data.id].res(data.result)\r\n\tdelete wkRequests[data.id]\r\n}\r\n\r\nif (!isWorkerThread) {\r\n\tif (isNode)\r\n\t\tworker.on(\"message\", handleWkMessage)\r\n\telse\r\n\t\tworker.addEventListener(\"message\", e => handleWkMessage(e.data))\r\n}\r\n\r\nfunction wkPromise(id: number) {\r\n\treturn new Promise((res, rej) => wkRequests[id] = { res, rej })\r\n}\r\n\r\nexport async function decodeAsync(input, options) {\r\n\tconst id = wkMsgId++\r\n\tworker.postMessage({ id, cmd: \"decode\", args: { input, options } })\r\n\treturn new Blueprint().fillFromArray(\r\n\t\tawait wkPromise(id) as any[]\r\n\t)\r\n}\r\n\r\nexport function decodeConfigCmdAsync(rawData) {\r\n\tconst id = wkMsgId++\r\n\tworker.postMessage({ id, cmd: \"decodeConfigCmd\", args: { rawData } })\r\n\treturn wkPromise(id) as Promise<any[]>\r\n}\r\n\r\nexport function encodeAsync(input: Blueprint) {\r\n\tconst id = wkMsgId++\r\n\tworker.postMessage({ id, cmd: \"encode\", args: { input: input.toArray() } })\r\n\treturn wkPromise(id) as Promise<string>\r\n}\r\n", "import { Blueprint } from \"./Blueprint.js\"\r\nimport { ConfigCmd } from \"./ConfigCmd.js\"\r\nimport { Decoder } from \"./Decoder.js\"\r\nimport { Encoder } from \"./Encoder.js\"\r\nimport { DecoderOptions } from \"./types.js\"\r\nimport * as util from \"./util.js\"\r\n\r\nexport { BPCmd } from \"./BPCmd.js\"\r\nexport { BuildBits } from \"./BuildBits.js\"\r\nexport { BuildCmd } from \"./BuildCmd.js\"\r\nexport { PREFIX } from \"./constants.js\"\r\nexport * from \"./types.js\"\r\nexport { Blueprint, ConfigCmd, Decoder, Encoder }\r\n\r\n/**\r\n * Synchronously decodes a blueprint string.\r\n * Supports the \"DSA:\" prefix (case-insensitive).\r\n * @param input The blueprint string.\r\n * @param options Decoding options.\r\n * @example\r\n * import { decodeSync } from \"dsabp-js\"\r\n * \r\n * const bp = decodeSync(str)\r\n */\r\nexport function decodeSync(input: string, options?: DecoderOptions) {\r\n\treturn new Decoder().decodeSync(input, options)\r\n}\r\n\r\n/**\r\n * Asynchronously decodes a blueprint string.\r\n * Supports the \"DSA:\" prefix (case-insensitive).\r\n * @param input The blueprint string.\r\n * @param options Decoding options.\r\n * @example\r\n * import { decode } from \"dsabp-js\"\r\n * \r\n * const bp = await decode(str)\r\n */\r\nexport async function decode(input: string, options?: DecoderOptions) {\r\n\treturn util.decodeAsync(input, options)\r\n}\r\n\r\n/**\r\n * Synchronously decodes the data of a {@link ConfigCmd} containing raw data.\r\n * @see {@link DecoderOptions.ignoreConfigCmdData} for more info.\r\n * @returns The same input instance, with decoded data.\r\n */\r\nexport function decodeConfigCmdSync(cmd: ConfigCmd) {\r\n\treturn new Decoder().decodeConfigCmdSync(cmd)\r\n}\r\n\r\n/**\r\n * Asynchronously decodes the data of a {@link ConfigCmd} containing raw data.\r\n * @see {@link DecoderOptions.ignoreConfigCmdData} for more info.\r\n * @returns The same input instance, with decoded data.\r\n */\r\nexport async function decodeConfigCmd(cmd: ConfigCmd) {\r\n\tif (!(cmd instanceof ConfigCmd))\r\n\t\tthrow new TypeError(`input must be a ${ConfigCmd.name}`)\r\n\tif (!cmd.isRaw) return cmd\r\n\tconst dataArr = await util.decodeConfigCmdAsync(cmd.rawData)\r\n\tcmd.rawData = undefined\r\n\treturn cmd.fillDataFromArray(dataArr)\r\n}\r\n\r\n/**\r\n * Synchronously encodes a {@link Blueprint} into a blueprint string.\r\n * Does not include the \"DSA:\" prefix, consider adding it on a public app.\r\n * @param input The blueprint to encode.\r\n * @example\r\n * import { encodeSync, PREFIX } from \"dsabp-js\"\r\n * \r\n * const str = PREFIX + encodeSync(bp)\r\n */\r\nexport function encodeSync(input: Blueprint) {\r\n\treturn new Encoder().encodeSync(input)\r\n}\r\n\r\n/**\r\n * Asynchronously encodes a {@link Blueprint} into a blueprint string.\r\n * Does not include the \"DSA:\" prefix, consider adding it on a public app.\r\n * @param input The blueprint to encode.\r\n * @example\r\n * import { encode, PREFIX } from \"dsabp-js\"\r\n * \r\n * const str = PREFIX + await encode(bp)\r\n */\r\nexport function encode(input: Blueprint) {\r\n\treturn util.encodeAsync(input)\r\n}\r\n"],
  "mappings": "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",
  "names": ["BPCmd", "BuildBits", "input", "reverse", "index", "mask", "force", "b", "target", "i", "str", "r", "c", "PREFIX", "BuildCmd", "BPCmd", "input", "prop", "arr", "BuildBits", "clone", "PusherMode", "LoaderPoint", "LoaderPriority", "FilterMode", "FixedAngle", "defaults", "msgKey_prop", "key", "ConfigCmd", "BPCmd", "input", "prop", "arr", "i", "msgKey", "val", "cfgArrToObj", "data", "cfgObjToArr", "target", "deepEquals", "clone", "a", "b", "keysA", "obj", "Blueprint", "input", "prop", "arr", "shallow", "cmd", "BuildCmd", "ConfigCmd", "c", "clone", "b64toUi8", "str", "c", "ui8tob64", "ui8", "createWorker", "insideWorker", "info", "lib", "e", "data", "r", "err", "bp", "workerData", "arrTypeMap", "Decoder", "#textDecoder", "#bytes", "#view", "#pos", "#lastArrType", "#init", "buff", "lastArrType", "input", "options", "PREFIX", "inflated", "b64decoded", "b64toUi8", "inflateSync", "Blueprint", "#read", "cmd", "ConfigCmd", "dataArr", "rawCmd", "b", "#readArray", "#readU8", "#readU16", "#readU32", "#readU64", "#readI8", "#readI16", "#readI32", "#readI64", "#readF32", "#readF64", "#readBytes", "#getU8", "#getU16", "#getU32", "#readStr", "arr", "prevArrType", "currArrType", "BuildCmd", "v", "byteLength", "headerOffset", "offset", "str", "headOffset", "readConfig", "Encoder", "_Encoder", "#textEncoder", "#bytes", "#view", "#pos", "#init", "size", "bp", "Blueprint", "initSize", "#write", "encoded", "deflated", "deflateSync", "ui8tob64", "#encodeArray", "arr", "obj", "#writeNumber", "#writeU8", "#writeStr", "#writeArr", "#writeBin", "BuildCmd", "ConfigCmd", "v", "isSigned", "isBigInt", "#writeF32", "#writeI8", "#writeI16", "#writeI32", "#writeI64", "#writeU16", "#writeU32", "#writeU64", "utf8arr", "len", "#ensureSize", "#writeU8arr", "values", "req", "buff", "bytes", "view", "isNode", "isWorkerThread", "wkMsgId", "wkRequests", "worker", "createWorker", "handleWkMessage", "data", "e", "wkPromise", "id", "res", "rej", "decodeAsync", "input", "options", "Blueprint", "decodeConfigCmdAsync", "rawData", "encodeAsync", "decodeSync", "input", "options", "Decoder", "decode", "decodeAsync", "decodeConfigCmdSync", "cmd", "decodeConfigCmd", "ConfigCmd", "dataArr", "decodeConfigCmdAsync", "encodeSync", "Encoder", "encode", "encodeAsync"]
}
